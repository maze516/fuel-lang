(do
  (define-macro-expand foreach-macro
        (container fcn) 
        (do 
    	   (def i 0)
    	   (def max (len container))
    	   (while (< i max)
    	     (do 
    		   (apply fcn (list (nth i container)))
    		   (setf i (+ i 1))
    		 )
    	   )        
        )
  )

  (define-macro-expand first-macro
        (a b) 
        (do 
    	   (def i 1)
           (+ a b i)
        )
  )
  
  (define-macro-expand second-macro
        (x y) 
        (do 
           (def container (list 1 2 3 4))
           (foreach-macro container (lambda (xx) 
             (do 
; TODO --> hier funktioniert die Ersetzung von x nicht !!! da wir uns in einem lambda befinden... :-( warum ist das lambda im expandedAst schon evaluiert !!!???                 
                 (print xx x)
             ))
           ) 
           (* x y (first-macro x y))
        )
  )
  
  (define-macro create-args (lambda (count)
      ;;'(p1 p2 p3)
      (list p1 p2 p3)
      )
  )
  
  (define-macro-expand create-global-funcs (className names)
      (do
          ;(create-args 3)
          (foreach-macro names (lambda (name)
              (do
                  (print (sym (string className "-" name)))
                  (def args '(p1 p2 p3))
                  (print "TEST" (list a b c) args)
                  ;(create-args 3)

                  (gdefn (sym (string className "-" name))
                         ;'(p1 p2 p3)
                         ; args
                         (create-args 3)
                         (print p1 p2 p3 (+ 7 p1 p3)))
              ))
          )
      )
  )

  ;; create list of symbols: (call obj methodName p1 p2 p3 p4)
  (defn create-call (methodName argCount)
      (do
         (def _result "(")
         (setf _result (+ _result "call "))
         (setf _result (+ _result "obj "))
         (setf _result (+ _result "\"" (str methodName) "\" "))
         (def i 0)
         (while (< i argCount)
           (do 
             (setf _result (+ _result (+ "p" (string i)) " "))
  			 (setf i (+ i 1))
           )
         )
         (setf _result (+ _result ")"))
         (return _result)
      )
  )
  
  ;; create list of symbols count=4 --> (p1 p2 p3 p4)
  (defn arg-list (argCount)
     (do
         (def result (list))
         (def i 0)
         (while (< i argCount)
           (do 
             (setf result (append result (list (+ "p" (string i)))))
  			 (setf i (+ i 1))
           )
         )
         (return result)
     )
  )

  ;; create list of symbols count=4 --> (obj p1 p2 p3 p4)
  (defn obj-arg-list (argCount)
     (do
         (def result (list))
         (setf result (append result (list 'obj)))
         (setf result (append result (arg-list argCount)))
         (return result)
     )
  )
  
  ; returns something like (gdef name (p1 p2 ...) (<code>))
  (defn create-native-method (name argcount) 
      (do 
          (print (obj-arg-list argcount))
          (print (string '(1 2 3)))
          (def code "(gdefn ")
          (setf code (+ code name " "))
          (setf code (+ code (str (obj-arg-list argcount)) " "))
          (setf code (+ code (str (create-call name argcount)) ")"))
          (return code)
      )
  )

  
          (def code (list))
          (setf code (append code (list 'gdefn)))
          (setf code (+ code (list '(1 2 3))))
            (print code)

  (def n (first-macro 2 3))
  (print n)  
  (def m (second-macro 4 3))
  (print m)  
  (def names (list "a" "b" "c"))
  (print names)
  (create-global-funcs "blub" names)
  (print "--------------------")
  (blub-a 1 2 3 4)
  (print "--------------------")
  (blub-b 1 5 3 44 23)
  (print "--------------------")
  (blub-c 1 5 54)
  (print (create-args 3))
  (print (create-native-method "blub" 3))
)