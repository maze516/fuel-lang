# Multi language build script for csharp and c++

matrix:
  include:
    - os: linux
      language: cpp
      compiler: clang
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-precise-3.8
          packages:
          - clang-3.8
          - qt5-default
          - qttools5-dev-tools
      script:
      - ./build_cpp.sh
    
    - os: linux
      language: cpp
      compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-6
          - qt5-default
          - qttools5-dev-tools
      script:
      - ./build_cpp.sh
    
    - os: linux
      language: cpp
      compiler: gcc/cmake
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - g++-6
      script:
      - cd CppLisp
      - cmake CMakeLists.txt
      - make -j 4
      - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./CppLispInterpreter:./CppLispDebugger
      - ./fuel -v
      - ./fuel -e "(println (platform))"
      - ./fuel
    
    - os: linux
      language: csharp
      compiler: mono
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
      script:
      - ./build_cs.sh
    
    - os: linux
      language: android
      compiler: gcc/cmake
      android:
        components:
            - build-tools-26.0.2
            - android-26
      before_install:
        - echo $HOME
        - cd ..
        - rm -fr $HOME/android-ndk-r16b
        - curl -L http://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip -O
        - unzip -oq android-ndk-r16b-linux-x86_64.zip
        - pwd
        - ls -lrt
        - rm android-ndk-r16b-linux-x86_64.zip
        - export ANDROID_NDK_HOME=$HOME/android-ndk-r16b
        - export PATH=$PATH:${ANDROID_NDK_HOME}
        #- echo y | sdkmanager "ndk-bundle"
        #- echo y | sdkmanager "cmake"
        - ls -lrt $ANDROID_NDK_HOME/build
        - ls -lrt $ANDROID_NDK_HOME/build/cmake
        - cd fuel-lang
      script:
      - cd CppLisp
      - cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=android-24 CMakeLists.txt
      - make -j 4
      - ls -lrt
      #- export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./CppLispInterpreter:./CppLispDebugger
      #- ./fuel -v
      #- ./fuel -e "(println (platform))"
      #- ./fuel
    
    - os: osx
      language: cpp
      compiler: clang
      before_install:
      - brew update
      - brew install qt
      - export PATH=/usr/local/opt/qt/bin:$PATH
      script:
      - ./build_cpp.sh
  
    - os: osx
      language: csharp
      compiler: mono
      script:
      - ./build_cs.sh
  
    - os: windows
      language: cpp
      compiler: cl
      env:
      - MSBUILD_PATH="c:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin"      
      script:
      - export PATH=$MSBUILD_PATH:$PATH
      - cd CppLisp
      #- MsBuild.exe /property:Configuration="Debug" /property:ExcludeFromBuild=Test CppLisp.sln 
      #- MsBuild.exe /property:Configuration="Release" /property:ExcludeFromBuild=Test CppLisp.sln 
      - MsBuild.exe /property:Configuration="ContinousIntgration" CppLisp.sln       
      #- MsBuild.exe -help
      - cd x64
      #- cd Debug
      #- ./fuel.exe -v
      #- ./fuel  -e "(println (platform))"
      #- cd ..
      - cd ContinousIntgration
      - ./fuel.exe -v
      - ./fuel  -e "(println (platform))"
  
install:
- "[ $CXX = g++ ] && export CXX=g++-6 || true"
- "[ $CXX = clang++ ] && export CXX=clang++-3.8 || true"
