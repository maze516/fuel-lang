(do
  (define-macro-expand foreach-macro
        (container fcn) 
        (do 
    	   (def i 0)
    	   (def max (len container))
    	   (while (< i max)
    	     (do 
    		   (apply fcn (list (nth i container)))
    		   (setf i (+ i 1))
    		 )
    	   )        
        )
  )

  (define-macro-expand first-macro
        (a b) 
        (do 
    	   (def i 1)
           (+ a b i)
        )
  )
  
  (define-macro-expand second-macro
        (x y) 
        (do 
           (def container (list 1 2 3 4))
           (foreach-macro container (lambda (xx) 
             (do 
; TODO --> hier funktioniert die Ersetzung von x nicht !!! da wir uns in einem lambda befinden... :-( warum ist das lambda im expandedAst schon evaluiert !!!???                 
                 (print xx x)
             ))
           ) 
           (* x y (first-macro x y))
        )
  )
  
  (define-macro-expand create-args (count)
      (list p1 p2 p3)
  )
  
  (define-macro-expand create-global-funcs (className names)
      (do
          (create-args 3)
          (foreach-macro names (lambda (name)
              (do
                  (print (sym (string className "-" name)))
                  (def args '(p1 p2 p3))
                  (print "TEST" (list a b c) args)
                  (create-args 3)

                  (gdefn (sym (string className "-" name))
                         ;'(p1 p2 p3)
                         ; args
                         (create-args 3)
                         (print p1 p2 p3 (+ 7 p1 p3)))
              ))
          )
      )
  )
  
  (def n (first-macro 2 3))
  (print n)  
  (def m (second-macro 4 3))
  (print m)  
  (def names (list "a" "b" "c"))
  (print names)
  (create-global-funcs "blub" names)
  (blub-a 1 2 3 4)
  (blub-b 1 "asdf" 3)
  (create-args 3)
)