;;====================================
;; standard library for fuel language
;;====================================

(do
    
  ;; foreach looop  
  (defn foreach (container fcn) 
     (do 
	   (def __i 0)
	   (def max (len container))
	   (while (< __i max)
	     (do 
		   (apply fcn (list (nth __i container)))
		   (setf __i (+ __i 1))
		 )
	   )
	 )
  )

  ;; create list of symbols count=4 --> (p1 p2 p3 p4)
  (defn arg-list-expression (argcount)
     (do
         (def result (list))
         (def i 0)
         (while (< i argcount)
           (do 
             (setf result (append result (list (sym (+ "p" (string i))))))
  			 (setf i (+ i 1))
           )
         )
         (return result)
     )
  )

  ;; create list of symbols count=4 --> (obj p1 p2 p3 p4)
  (defn arg-list-with-obj-expression (obj argcount)
     (do
         (def result (list))
         (setf result (append result (list obj)))
         (setf result (append result (arg-list-expression argcount)))
         (return result)
     )
  )
  
  ;; create list of symbols: (call obj methodname p1 p2 p3 p4)
  (defn create-call-expression (callfcn methodname obj argcount)
      (do
         (def _result (list))
         (setf _result (append _result (list callfcn)))
         (if (!= obj ())
            (setf _result (append _result (list obj)))
            (nop)
         )
         (setf _result (append _result (list (sym methodname))))
         (def i 0)
         (while (< i argcount)
           (do 
             (setf _result (append _result (list (sym (+ "p" (string i))))))
  			 (setf i (+ i 1))
           )
         )
         ;(println _result)
         (return _result)
      )
  )

  ;; create something like (gdef name (obj p1 p2 ...) (<code>))
  (defn create-native-method-expression (lisp-prefix full-class-name name netName isStatic argcount) 
      (do 
          (def code (list))
          (setf code (append code (list 'gdefn)))
          (setf code (append code (list (string lisp-prefix name))))
          (if isStatic
             (do 
               (setf code (append code (list (arg-list-expression argcount))))
               (setf code (append code (list (create-call-expression 'call-static netName full-class-name argcount))))
             )
             (do 
               (setf code (append code (list (arg-list-with-obj-expression 'obj argcount))))             
               (setf code (append code (list (create-call-expression 'call netName obj argcount))))
             )
          )
          ;(println "---->" code)
          (return code)
      )
  )
  
  ;; create lisp functions for a native class  
  (defn create-native (lisp-name full-class-name) 
        (do
            ; inspect class and generate for all public properties and methods method stubs
            (gdefn (sym (string "create-" lisp-name)) () (call full-class-name))
			
			(def methodInfos (native-methods full-class-name))
			(foreach methodInfos 
               (lambda (methodNameAndArgCount) 
    			   (do 
    			     (def methodName (first methodNameAndArgCount))
    			     (def methodArgsCount (nth 1 methodNameAndArgCount))
                     (def isStatic (nth 2 methodNameAndArgCount))
    			     (def netMethodName (nth 3 methodNameAndArgCount))
                     (def method-expr (create-native-method-expression (+ (str lisp-name) "-") full-class-name methodName netMethodName isStatic methodArgsCount))
                     (eval method-expr)
                     (println method-expr)
                     ;(def method (create-native-method (+ (str lisp-name) "-") methodName methodArgsCount))
                     ;(evalstr method)
    			   )
			   )
			)

			(def fieldInfos (native-fields full-class-name))
			(foreach fieldInfos 
               (lambda (fieldName) 
    			   (do 
                     ;	(gdef Math-PI (field System.Math PI))
					 (def field-expr (list 'gdef (sym (string lisp-name "-" fieldName)) (list 'field full-class-name fieldName) ))
					 (eval field-expr)
    			   )
			   )
			)
        )     
  )
  
  ;; create the standard library for fuel
  
  (create-native "Math" "System.Math")
  (create-native "File" "System.IO.File")
  (create-native "List" "System.Collections.Generic.List`1[[System.Object]]") 
  (create-native "Array" "System.Object[]")
  (create-native "Dict" "System.Collections.Generic.Dictionary`2[[System.Object],[System.Object]]")  

  (nop)
)
  